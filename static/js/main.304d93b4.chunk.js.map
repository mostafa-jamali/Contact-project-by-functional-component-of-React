{"version":3,"sources":["Components/Edit/EdirForm.jsx","Components/Contacts/Tr.js","Components/Add/AddForm.jsx","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["EditForm","contacts","setContacts","show","handleCloseEdit","handleShowEdit","useState","name","lastName","phone","email","editObj","setEditObj","handleChange","event","target","value","Modal","onHide","Header","closeButton","Title","Body","onSubmit","preventDefault","className","htmlFor","type","placeholder","onChange","Footer","Button","variant","onClick","Tr","item","setShow","id","filter","AddForm","handleClose","handleShow","newObj","setNewObj","obj","reduce","initial","Math","max","length","handleAdd","Table","action","search","setSearch","newTr","toLowerCase","startsWith","e","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.304d93b4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ModalDialog from 'react-bootstrap/ModalDialog';\r\nimport ModalHeader from 'react-bootstrap/ModalHeader';\r\nimport ModalTitle from 'react-bootstrap/ModalTitle';\r\nimport ModalBody from 'react-bootstrap/ModalBody';\r\nimport ModalFooter from 'react-bootstrap/ModalFooter';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { propTypes } from \"react-bootstrap/esm/Image\";\r\n\r\n\r\nfunction EditForm({contacts, setContacts, show,handleShowEdit, handleCloseEdit}) {\r\n\r\n    const [editObj, setEditObj] = useState({\r\n        name: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        email: \"\"\r\n    })\r\n    const handleChange= (event)=> {\r\n        const {name, value} = event.target;\r\n        setEditObj({...editObj, [name]:value});\r\n    }\r\n    \r\n    // const handleEdit = (obj)=>{\r\n    //     // let edit = contacts.map((item)=> item.id == obj.id);\r\n    //     setEditObj({\r\n    //         name: obj.name,\r\n    //         lastName: obj.lastName,\r\n    //         phone: obj.phone,\r\n    //         email: obj.email\r\n    //     })\r\n    //     // setContacts([...contacts, {...editObj}]);\r\n    // }\r\n    const handleClear= ()=>{\r\n        setEditObj({\r\n            name: \"\",\r\n            lastName: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n        })\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // handleEdit(obj);\r\n        // handleClear();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleCloseEdit}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Edit contact</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form onSubmit={handleSubmit} className=\"d-flex flex-column\">\r\n\r\n                        <label htmlFor=\"name\" className=\"mb-0 mt-0\">name:</label>\r\n                        <input type=\"text\" placeholder=\"Enter name\" name=\"name\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <label htmlFor=\"latName\" className=\"mb-0 mt-2\">latName:</label>\r\n                        <input type=\"text\" placeholder=\"Enter lastName\" name=\"lastName\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <label htmlFor=\"phone\" className=\"mb-0 mt-2\">phone:</label>\r\n                        <input type=\"phone\" placeholder=\"Enter phone\" name=\"phone\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <label htmlFor=\"email\" className=\"mb-0 mt-2\">email:</label>\r\n                        <input type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <Modal.Footer>\r\n                            <Button variant=\"danger\" onClick={handleCloseEdit}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"secondary\" type=\"reset\" onClick={handleClear}>\r\n                                Clear\r\n                            </Button>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default EditForm;","import React, { useState } from 'react';\r\nimport EditForm from '../Edit/EdirForm'\r\n\r\nfunction Tr ({contacts, setContacts, item}) {\r\n\r\n    const handleDelete= (id)=>{\r\n        setContacts([...contacts.filter(item=> item.id != id)])\r\n    }\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleCloseEdit = () => setShow(false);\r\n    const handleShowEdit = () => {\r\n        setShow(true);\r\n        // let id = contacts.filter((item)=> item.id == id);\r\n        // handleEdit(id)\r\n    };\r\n\r\n    return (\r\n            <>\r\n                <tr className=\"tr\">\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.lastName}</td>\r\n                    <td>{item.phone}</td>\r\n                    <td>{item.email}</td>\r\n                    <td>\r\n                        <button onClick={()=> handleDelete(item.id)} className=\"btn btn-danger mx-1\"><i className='fa fa-trash'/></button>\r\n                        <button onClick={handleShowEdit} className=\"btn btn-primary mx-1\"><i className='fa fa-edit'/></button>\r\n                        <EditForm contacts={contacts} setContacts={setContacts} show={show} handleShowEdit={handleShowEdit} handleCloseEdit={handleCloseEdit}/>\r\n                    </td>\r\n                </tr>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default Tr;","import React, { useState, useEffect } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ModalDialog from 'react-bootstrap/ModalDialog';\r\nimport ModalHeader from 'react-bootstrap/ModalHeader';\r\nimport ModalTitle from 'react-bootstrap/ModalTitle';\r\nimport ModalBody from 'react-bootstrap/ModalBody';\r\nimport ModalFooter from 'react-bootstrap/ModalFooter';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { propTypes } from \"react-bootstrap/esm/Image\";\r\n\r\n\r\nfunction AddForm({contacts, setContacts, show, setShow,handleShow, handleClose}) {\r\n\r\n    const [newObj, setNewObj] = useState({\r\n        name: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        email: \"\",\r\n    })\r\n    const handleChange= (event)=> {\r\n        const {name, value} = event.target;\r\n        setNewObj({...newObj, [name]:value});\r\n    }\r\n    const handleAdd = (obj)=>{\r\n        let id = contacts.reduce((initial, item) =>  1 + Math.max(item.id), 0);\r\n        (obj.name.length > 0) && (obj.lastName.length > 0) && (obj.phone.length > 0) && (obj.email.length > 0)\r\n        && setContacts([...contacts, {...obj, id}]);\r\n    }\r\n    const handleClear= ()=>{\r\n        setNewObj({\r\n            name: \"\",\r\n            lastName: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n        })\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        handleAdd(newObj);\r\n        // handleClear();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add contact</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form onSubmit={handleSubmit} className=\"d-flex flex-column\">\r\n\r\n                        <label htmlFor=\"name\" className=\"mb-0 mt-0\">name:</label>\r\n                        <input type=\"text\" placeholder=\"Enter name\" name=\"name\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <label htmlFor=\"latName\" className=\"mb-0 mt-2\">latName:</label>\r\n                        <input type=\"text\" placeholder=\"Enter lastName\" name=\"lastName\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <label htmlFor=\"phone\" className=\"mb-0 mt-2\">phone:</label>\r\n                        <input type=\"phone\" placeholder=\"Enter phone\" name=\"phone\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <label htmlFor=\"email\" className=\"mb-0 mt-2\">email:</label>\r\n                        <input type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleChange} className=\"rounded border\"/>\r\n\r\n                        <Modal.Footer>\r\n                            <Button variant=\"danger\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"secondary\" type=\"reset\" onClick={handleClear}>\r\n                                Clear\r\n                            </Button>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default AddForm;","import React, { useState, useEffect } from 'react';\r\nimport Tr from '../Contacts/Tr';\r\nimport Editform from '../Add/AddForm';\r\nimport '../Table/table.css';\r\nimport AddForm from '../Add/AddForm';\r\n\r\nfunction Table () {\r\n\r\n    const [contacts, setContacts] = useState([\r\n        {id:1, name:\"ali\", lastName:\"komijani\", phone:\"09014356218\", email:\"ali@gmail.com\", action:\"\"},\r\n        {id:2, name:\"mohammad\", lastName:\"khorrami\", phone:\"09114356218\", email:\"mohammad@gmail.com\", action:\"\"},\r\n        {id:3, name:\"reza\", lastName:\"hatami\", phone:\"09124356218\", email:\"reza@gmail.com\", action:\"\"},\r\n        {id:4, name:\"mahdi\", lastName:\"sadeghi\", phone:\"09134356218\", email:\"sadeghi@gmail.com\", action:\"\"},\r\n        {id:5, name:\"hasan\", lastName:\"mohammadi\", phone:\"09224356218\", email:\"hasan@gmail.com\", action:\"\"},\r\n        {id:6, name:\"amir\", lastName:\"sharifi\", phone:\"09354356218\", email:\"sharifi@gmail.com\", action:\"\"},\r\n        {id:7, name:\"amirali\", lastName:\"ansari\", phone:\"09356356218\", email:\"ansari@gmail.com\", action:\"\"},\r\n        {id:8, name:\"mehran\", lastName:\"mansoori\", phone:\"09164356218\", email:\"mehran@gmail.com\", action:\"\"},\r\n\r\n    ]);\r\n    const [search, setSearch]= useState(\"\");\r\n\r\n    const chengeHandler= (e)=>{\r\n        setSearch(e.target.value)\r\n    }\r\n    let newTr = contacts.filter(item=> (\r\n        item.name.toLowerCase().startsWith(search.toLowerCase()) ||\r\n        item.phone.startsWith(search)\r\n    ))\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true)\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"tableContainer table-responsive\">\r\n                <div className=\"col-12 row justify-content-around pl-5\">\r\n                    <div className=\"col-10 col-md-8 col-lg-6 mx-auto row align-items-center justify-content-center bg-info rounded-lg py-2 my-2 ml-5\">\r\n                        <label className=\"mb-0 col-6 col-sm-8 col-lg-3\">search:</label>\r\n                        <input className=\"rounded border-0  col-12 col-sm-8 col-lg-6\" name={'search'} onChange={chengeHandler} value={search} placeholder=\"search contact\"/>\r\n                        <button className=\"btn btn-light py-1 m-1 col-3 col-sm-2 col-lg-2\"><i className='fa fa-search'/></button>\r\n                    </div>\r\n                    <button className=\"btn btn-info my-3\" onClick={handleShow}><i className='fa fa-plus'/></button>\r\n                    <AddForm contacts={contacts} setContacts={setContacts} show={show} setShow={setShow} handleShow={handleShow} handleClose={handleClose}/>\r\n                </div>\r\n                <table className=\"table col-12 table-striped table-hover border\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>name</th>\r\n                            <th>last name</th>\r\n                            <th>phone</th>\r\n                            <th>email</th>\r\n                            <th>action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {newTr.map((item) =>(\r\n                            <Tr key={item.id} item={item} contacts={contacts} setContacts={setContacts} />\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Table from './Components/Table/Table';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}